{"version":3,"sources":["webpack:///./src/components/category.js","webpack:///./src/components/rating.js","webpack:///./src/logic/mapWeekday.js","webpack:///./src/components/searchResult.js","webpack:///./src/components/resultTitle.js","webpack:///./src/components/FilterOptions.js","webpack:///./src/logic/getPriceState.js","webpack:///./src/logic/filterKeyword.js","webpack:///./src/index.js","webpack:///./src/logic/openTime.js"],"names":["Category","_ref","options","updateKeyword","categories","map","opt","index","react_default","a","createElement","onClick","key","className","Rating","newScore","val","precision","Math","round","pow","roundDecimal","score","stars","Array","from","length","fill","starType","type","rating_Star","id","Star","_ref2","full","half","empty","mapWeekDay","jsWeekDay","ResultList","list","results","item","searchResult_ResultItem","resultId","data","ResultItem","Date","getDay","todayOpenTime","hours","filter","slot","open","some","day","start","end","categoriesTitle","title","src","photos","name","rating_Rating","rating","review_count","price","location","address1","city","ResultTitle","count","FilterOptions","updatePrice","updateOpenTime","isOpenNow","isFirstToggle","priceFilter","Object","keys","openNowBtn","isAllPirceOptSelected","every","onlyCurrentOptSelected","current","allSelectedOpt","matchCategories","keyword","alias","toLowerCase","includes","App","props","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","call","state","$","$$","$$$","$$$$","forEach","bind","React","Component","itemListData","jsonData","search","business","sort","itemA","itemB","setState","prevState","updateOption","option","assign","priceTag","getPriceState","_this2","weekDay","now","getHours","getMinutes","dayOpenTime","_slot$open$dayOpenTim","isRestaurantOpenNow","word","isMatchKeyword","value","placeholder","onChange","e","currentTarget","category_Category","resultTitle_ResultTitle","FilterOptions_FilterOptions","searchResult_ResultList","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"main.8599.js","sourcesContent":["import React from \"react\";\nexport const Category = ({options, updateKeyword}) => {\n  const categories = options.map((opt, index) => (\n    <li\n      onClick={() => updateKeyword(opt)}\n      key={`category-opt-${index}`}>\n      {opt}\n    </li>\n  ));\n  return <ul className=\"categories\">{categories}</ul>;\n};\n","import \"../style/star.scss\";\nimport React from \"react\";\n\nexport const Rating = ({score}) => {\n  var roundDecimal = function(val, precision) {\n    return (\n      Math.round(\n        Math.round(val * Math.pow(10, (precision || 0) + 1)) / 10\n      ) / Math.pow(10, precision || 0)\n    );\n  };\n\n  let newScore = roundDecimal(score, 1);\n  let stars = Array.from({length: 5})\n    .fill(0)\n    .map((starType, index) => {\n      let type = \"\";\n      if (newScore > 0) {\n        type = newScore >= 1 ? \"full\" : \"half\";\n      } else {\n        type = \"empty\";\n      }\n      newScore--;\n      return <Star key={index} type={type} />;\n    });\n  return <div id=\"star-wrapper\">{stars}</div>;\n};\n\nconst Star = ({type}) => {\n  const starType = {\n    full: \"full\",\n    half: \"half\",\n    empty: \"empty\"\n  };\n  return <span className={starType[type]} />;\n};\n","export const mapWeekDay = jsWeekDay => {\n  return jsWeekDay === 0 ? 6 : jsWeekDay - 1;\n};\n","import React from \"react\";\nimport \"../style/resultItem.scss\";\nimport {Rating} from \"./rating.js\";\nimport {mapWeekDay} from \"../logic/mapWeekday.js\";\n\nexport const ResultList = ({list, updateKeyword}) => {\n  if (!list.length) {\n    return <div className=\"empty-result\">No Matched Restaurants</div>;\n  }\n\n  const results = list.map((item, index) => {\n    return (\n      <div key={`result-item-${index}`}>\n        <ResultItem\n          resultId={index + 1}\n          data={item}\n          updateKeyword={updateKeyword}\n        />\n      </div>\n    );\n  });\n\n  return (\n    <div>\n      <h5>Sort by rating</h5>\n      {results}\n    </div>\n  );\n};\n\nconst ResultItem = ({resultId, data, updateKeyword}) => {\n  let weekDay = mapWeekDay(new Date().getDay());\n  weekDay = 5;\n  let filtered = data.hours.filter(slot =>\n    slot.open.some(day => day.day === weekDay)\n  );\n\n  let todayOpenTime = filtered.map(slot =>\n    slot.open.filter(day => day.day === weekDay).map((day, index) => {\n      return (\n        <span key={`open-time-${index}`}>\n          {index === 0 && <span> 本日營業時間 : </span>}\n          {index > 0 && \", \"}\n          <span>\n            {day.start} ~ {day.end}\n          </span>\n        </span>\n      );\n    })\n  );\n\n  let categoriesTitle = data.categories.map((item, index) => (\n    <a\n      key={`categories-title-${index}`}\n      onClick={() => {\n        updateKeyword(item.title);\n      }}>\n      {item.title}\n      {index !== data.categories.length - 1 ? \",\" : \"\"}{\" \"}\n    </a>\n  ));\n\n  return (\n    <div className=\"result-item\">\n      <div className=\"photo-box\">\n        <img src={data.photos[0]} />\n      </div>\n      <div className=\"info\">\n        <div>\n          <h4>\n            {resultId} {data.name}\n          </h4>\n          <div className=\"rating-row\">\n            <Rating score={data.rating} />\n            <span className=\"reviews\">\n              {data.review_count} reviews\n            </span>\n          </div>\n          <div>\n            {data.price} - {categoriesTitle}\n          </div>\n        </div>\n        <div />\n        {todayOpenTime}\n        <div>\n          {data.location.address1} ( {data.location.city} )\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nexport const ResultTitle = ({count}) => {\n  return (\n    <div className=\"result-title\">\n      <span>{count} restanrants near Taipei</span>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"../style/filterOptions.scss\";\n\nexport const FilterOptions = ({\n  price,\n  updatePrice,\n  updateOpenTime,\n  isOpenNow,\n  isFirstToggle\n}) => {\n  const priceFilter = Object.keys(price).map((opt, index) => (\n    <a\n      className={price[opt] && !isFirstToggle ? \"on\" : \"\"}\n      key={`price-filter-${index}`}\n      onClick={() => updatePrice(opt)}>\n      {opt}\n    </a>\n  ));\n  const openNowBtn = (\n    <a\n      className={isOpenNow ? \"opennow-btn active\" : \"opennow-btn\"}\n      onClick={() => updateOpenTime()}>\n            Open Now\n    </a>\n  );\n  return (\n    <div className=\"filter-options\">\n      {priceFilter}\n      <span>{openNowBtn}</span>\n    </div>\n  );\n};\n","/*\n * change price filter options base on a selected pirce tag \n * @param prevState object prevState of App\n * return Object new price state\n */\nexport const getPriceState = (prevState, opt) => {\n  let {price, isFirstToggle} = prevState;\n\n  if (isFirstToggle && isAllPirceOptSelected(price)) {\n    let updateOption = {};\n    for (let option in prevState.price) {\n      if (prevState.price[option] && option !== opt) {\n        updateOption[option] = false;\n      }\n    }\n    return {\n      isFirstToggle: false,\n      price: Object.assign(prevState.price, updateOption)\n    };\n  }\n\n  if (onlyCurrentOptSelected(price, opt)) {\n    let updateOption = {};\n    for (let option in prevState.price) {\n      updateOption[option] = true;\n    }\n    return {\n      isFirstToggle: true,\n      price: updateOption\n    };\n  }\n\n  let priceTag = {};\n  priceTag[opt] = !prevState.price[opt];\n  return {\n    isFirstToggle: false,\n    price: Object.assign(prevState.price, priceTag)\n  };\n};\n\nconst isAllPirceOptSelected = price => {\n  return Object.keys(price).every(opt => price[opt]);\n};\n\nconst onlyCurrentOptSelected = (price, current) => {\n  let allSelectedOpt = Object.keys(price).filter(opt => price[opt]);\n  return (\n    allSelectedOpt.length === 1 &&\n        allSelectedOpt[0] === current &&\n        price[current]\n  );\n};\n","/*\n * @param item object\n * @param keyword string\n * return boolean true if current restaurant's name match keyword, otherwise return false\n */\nexport const isMatchKeyword = (item, keyword) => {\n  let word = keyword.toLowerCase();\n  return (\n    item.name.toLowerCase().includes(word) ||\n        matchCategories(item.categories, word)\n  );\n};\n\n/*\n * @param categories Array\n * @param keyword String\n * return boolean true if current restaurant's categories match keyword, otherwise, return\n * false\n */\nconst matchCategories = (categories, keyword) => {\n  return categories.some(\n    item =>\n      item.alias.toLowerCase().includes(keyword) ||\n            item.title.toLowerCase().includes(keyword)\n  );\n};\n","import \"./style/reset.scss\";\nimport \"./style/header.scss\";\nimport \"./style/main.scss\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport jsonData from \"./data/yelp_response_20181003.json\";\nimport {Category} from \"./components/category.js\";\nimport {ResultList} from \"./components/searchResult.js\";\nimport {ResultTitle} from \"./components/resultTitle.js\";\nimport {FilterOptions} from \"./components/FilterOptions.js\";\nimport {isRestaurantOpenNow} from \"./logic/openTime.js\";\nimport {getPriceState} from \"./logic/getPriceState.js\";\nimport {isMatchKeyword} from \"./logic/filterKeyword.js\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // user input to filter search results\n      keyword: \"\",\n\n      // use to detect if all price tag haven't been selected yet\n      isFirstToggle: true,\n\n      // price tag to filter results\n      price: {$: true, $$: true, $$$: true, $$$$: true},\n\n      // is open now filter button selected\n      isOpenNow: false\n    };\n\n    [\"updateKeyword\", \"updatePrice\", \"updatePrice\"].forEach(name => {\n      this[name] = this[name].bind(this);\n    });\n  }\n  componentDidMount() {\n    // fetch json files, and sort fetched result by rating\n    const itemListData = jsonData.data.search.business.sort(\n      (itemA, itemB) => itemB.rating - itemA.rating\n    );\n\n    this.setState({list: itemListData});\n  }\n  updateKeyword(keyword) {\n    this.setState({keyword: keyword});\n  }\n  updatePrice(opt) {\n    this.setState(prevState => getPriceState(prevState, opt));\n  }\n  updateOpenTime() {\n    this.setState(prevState => {\n      return {isOpenNow: !prevState.isOpenNow};\n    });\n  }\n\n  render() {\n    let list = this.state.list || [];\n\n    // filter results by price filter\n    if (list.length) {\n      list = list.filter((item, index) => {\n        return (\n          this.state.price[item.price] ||\n                    (this.state.isFirstToggle && item.price === null)\n        );\n      });\n    }\n\n    // filter results by if restaurants is open now.\n    if (this.state.isOpenNow) {\n      list = list.filter(item =>\n        isRestaurantOpenNow(item.hours, item.name)\n      );\n    }\n\n    // filter results by if a user inputs any keywowrd\n    if (this.state.keyword) {\n      list = list.filter(item =>\n        isMatchKeyword(item, this.state.keyword.toLowerCase())\n      );\n    }\n\n    return (\n      <div>\n        <header>\n          <div>\n            <div className=\"search-row\">\n              <input\n                value={this.state.keyword}\n                placeholder=\"Find a restanrant\"\n                onChange={e =>\n                  this.setState({\n                    keyword: e.currentTarget.value\n                  })\n                }\n              />\n              <div className=\"location\">\n                <span>Near Taipei</span>\n              </div>\n            </div>\n            <Category\n              updateKeyword={this.updateKeyword}\n              options={[\n                \"Hot Pot\",\n                \"Seafood\",\n                \"Desserts\",\n                \"Brunch\",\n                \"Taiwanese\"\n              ]}\n            />\n          </div>\n        </header>\n        <main>\n          <div>\n            <ResultTitle count={list.length} />\n            <FilterOptions\n              isFirstToggle={this.state.isFirstToggle}\n              price={this.state.price}\n              isOpenNow={this.state.isOpenNow}\n              updatePrice={this.updatePrice}\n              updateOpenTime={this.updateOpenTime}\n            />\n            <ResultList\n              updateKeyword={this.updateKeyword}\n              list={list}\n            />\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"main\"));\n","import {mapWeekDay} from \"../logic/mapWeekday.js\";\n\nexport const isRestaurantOpenNow = (hours, name) => {\n  let weekDay = mapWeekDay(new Date().getDay());\n  let nowHour = new Date().getHours();\n  let nowMin = new Date().getMinutes();\n  let now = \"\" + nowHour + nowMin;\n\n  return hours.some(slot => {\n    let isOpen = false;\n    for (let dayOpenTime in slot.open) {\n      if (\n        slot.open[dayOpenTime] &&\n                slot.open[dayOpenTime].day === weekDay\n      ) {\n        let {start, end} = slot.open[dayOpenTime];\n        // check if restarant open now\n        let isOpenNow =\n                    (start <= now && now <= end) ||\n                    (end <= start && (now <= end || now >= start));\n        if (isOpenNow) {\n          return true;\n        }\n      }\n    }\n    return isOpen;\n  });\n};\n"],"sourceRoot":""}